{"version":3,"sources":["Buttons.js","List.js","App.js","serviceWorker.js","index.js"],"names":["Buttons","props","className","onClick","addBtn","id","type","value","removeBtn","clearBtn","List","addList","state","i","el","document","createElement","innerHTML","getElementById","appendChild","setState","removeList","list","removeChild","lastChild","clearList","hasChildNodes","firstChild","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTAeeA,G,YAZC,SAACC,GAET,OACI,yBAAKC,UAAU,WACX,2BAAOC,QAASF,EAAMG,OAAQF,UAAU,SAASG,GAAG,MAAMC,KAAK,SAASC,MAAM,QAC9E,2BAAOJ,QAASF,EAAMO,UAAWN,UAAU,SAASG,GAAG,SAASC,KAAK,SAASC,MAAM,WACpF,2BAAOJ,QAASF,EAAMQ,SAAUP,UAAU,SAASG,GAAG,QAAQC,KAAK,SAASC,MAAM,aCL7EG,E,YACjB,aAAc,IAAD,8BACT,+CAKAC,QAAU,WACN,GAAG,EAAKC,MAAMC,EAAI,GAAG,CACjB,IAAIC,EAAKC,SAASC,cAAc,MAChCF,EAAGG,UAAY,eAAgB,EAAKL,MAAMC,EAC7BE,SAASG,eAAe,QAChCC,YAAYL,GACjB,EAAKM,SAAS,CAACP,EAAE,EAAKD,MAAMC,EAAE,MAZ7B,EAiBTQ,WAAa,WACT,GAAG,EAAKT,MAAMC,EAAI,EAAE,CACpB,IAAMS,EAAOP,SAASG,eAAe,QACrCI,EAAKC,YAAYD,EAAKE,WACtB,EAAKJ,SAAS,CAACP,EAAE,EAAKD,MAAMC,EAAE,MArBzB,EAyBTY,UAAY,WAER,IADA,IAAMH,EAAOP,SAASG,eAAe,QAC9BI,EAAKI,iBACRJ,EAAKC,YAAYD,EAAKK,YAE1B,EAAKP,SAAS,CAACP,EAAE,KA5BrB,EAAKD,MAAM,CACPC,EAAG,GAHE,E,sEAqCT,OACI,yBAAKX,UAAU,aACX,wBAAIG,GAAG,OAAOH,UAAU,SAGxB,kBAAC,EAAD,CACAE,OAAQwB,KAAKjB,QACbH,UAAWoB,KAAKP,WAChBZ,SAAUmB,KAAKH,iB,GA9CGI,aCQnBC,MARf,WACE,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,QCKc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStB,SAASG,eAAe,SD2H3C,kBAAmBoB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a8e6a0a2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Buttons.css';\r\n\r\nconst Buttons = (props) => {\r\n    \r\n        return(\r\n            <div className='Buttons'>\r\n                <input onClick={props.addBtn} className='button' id='add' type=\"button\" value='Add'/>\r\n                <input onClick={props.removeBtn} className='button' id='remove' type=\"button\" value='Remove'/>\r\n                <input onClick={props.clearBtn} className='button' id='clear' type=\"button\" value='Clear'/>\r\n            </div>\r\n        );\r\n    \r\n};\r\n\r\nexport default Buttons;","import React,{Component} from 'react';\r\nimport './List.css';\r\nimport Buttons from './Buttons';\r\n\r\nexport default class List extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            i: 1\r\n        }\r\n    }\r\n        addList = () => {\r\n            if(this.state.i < 15){\r\n                let el = document.createElement('li');\r\n                el.innerHTML = 'Task Number '+ this.state.i;\r\n                const list = document.getElementById('list');\r\n                list.appendChild(el);\r\n                this.setState({i:this.state.i+1});\r\n                }\r\n            }\r\n        \r\n        \r\n        removeList = () => {\r\n            if(this.state.i > 1){\r\n            const list = document.getElementById('list');\r\n            list.removeChild(list.lastChild);\r\n            this.setState({i:this.state.i-1});\r\n            }\r\n        }\r\n\r\n        clearList = () =>{\r\n            const list = document.getElementById('list');\r\n            while (list.hasChildNodes()) {\r\n                list.removeChild(list.firstChild);\r\n            }\r\n            this.setState({i:1});\r\n        }\r\n    \r\n    \r\n    \r\n    render(){\r\n    \r\n        return(\r\n            <div className='listPanel'>\r\n                <ul id='list' className='List'>\r\n                    \r\n                </ul>\r\n                <Buttons \r\n                addBtn={this.addList}\r\n                removeBtn={this.removeList}\r\n                clearBtn={this.clearList}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport List from './List';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <List/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}